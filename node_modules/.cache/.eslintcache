[{"/Users/decagon/Desktop/PERSONAL/udemy-REACT-QUERY/base-blog-em/src/index.js":"1","/Users/decagon/Desktop/PERSONAL/udemy-REACT-QUERY/base-blog-em/src/reportWebVitals.js":"2","/Users/decagon/Desktop/PERSONAL/udemy-REACT-QUERY/base-blog-em/src/App.jsx":"3","/Users/decagon/Desktop/PERSONAL/udemy-REACT-QUERY/base-blog-em/src/Posts.jsx":"4","/Users/decagon/Desktop/PERSONAL/udemy-REACT-QUERY/base-blog-em/src/PostDetail.jsx":"5"},{"size":500,"mtime":1680111894658,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1680111894658,"results":"8","hashOfConfig":"7"},{"size":427,"mtime":1680125665725,"results":"9","hashOfConfig":"7"},{"size":1541,"mtime":1680454206244,"results":"10","hashOfConfig":"7"},{"size":1002,"mtime":1680111894657,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"h814m8",{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"14"},"/Users/decagon/Desktop/PERSONAL/udemy-REACT-QUERY/base-blog-em/src/index.js",[],["25","26"],"/Users/decagon/Desktop/PERSONAL/udemy-REACT-QUERY/base-blog-em/src/reportWebVitals.js",[],"/Users/decagon/Desktop/PERSONAL/udemy-REACT-QUERY/base-blog-em/src/App.jsx",[],"/Users/decagon/Desktop/PERSONAL/udemy-REACT-QUERY/base-blog-em/src/Posts.jsx",["27","28","29"],"import { useState } from \"react\";\nimport { useQuery } from \"react-query\";\n\nimport { PostDetail } from \"./PostDetail\";\nconst maxPostPage = 10;\n\nasync function fetchPosts() {\n  const response = await fetch(\n    \"https://jsonplaceholder.typicode.com/posts?_limit=10&_page=0\"\n  );\n  return response.json();\n}\n\nexport function Posts() {\n  const [currentPage, setCurrentPage] = useState(0);\n  const [selectedPost, setSelectedPost] = useState(null);\n\n  // replace with useQuery\n  const { data, isError, error, isLoading } = useQuery(\"posts\", fetchPosts);\n  if (isLoading) return <h3>Loading...</h3>;\n  if (isError)\n    return (\n      <>\n        <h3>Oops, something went wrong</h3>\n        <p>{error.toString()}</p>\n      </>\n    );\n\n  return (\n    <>\n      <ul>\n        {data.map((post) => (\n          <li\n            key={post.id}\n            className=\"post-title\"\n            onClick={() => setSelectedPost(post)}\n          >\n            {post.title}\n          </li>\n        ))}\n      </ul>\n      <div className=\"pages\">\n        <button disabled onClick={() => {}}>\n          Previous page\n        </button>\n        <span>Page {currentPage + 1}</span>\n        <button disabled onClick={() => {}}>\n          Next page\n        </button>\n      </div>\n      <hr />\n      {selectedPost && <PostDetail post={selectedPost} />}\n    </>\n  );\n}\n\nfunction computeClossetToZero(ts: number[]) {\n  let closest = ts[0];\n  for (let i = 1; i < ts.length; i++) {\n    if (Math.abs(ts[i]) < Math.abs(closest)) {\n      closest = ts[i];\n    }\n  }\n  return closest;\n}\n","/Users/decagon/Desktop/PERSONAL/udemy-REACT-QUERY/base-blog-em/src/PostDetail.jsx",["30","31","32"],"async function fetchComments(postId) {\n  const response = await fetch(\n    `https://jsonplaceholder.typicode.com/comments?postId=${postId}`\n  );\n  return response.json();\n}\n\nasync function deletePost(postId) {\n  const response = await fetch(\n    `https://jsonplaceholder.typicode.com/postId/${postId}`,\n    { method: \"DELETE\" }\n  );\n  return response.json();\n}\n\nasync function updatePost(postId) {\n  const response = await fetch(\n    `https://jsonplaceholder.typicode.com/postId/${postId}`,\n    { method: \"PATCH\", data: { title: \"REACT QUERY FOREVER!!!!\" } }\n  );\n  return response.json();\n}\n\nexport function PostDetail({ post }) {\n  // replace with useQuery\n  const data = [];\n\n  return (\n    <>\n      <h3 style={{ color: \"blue\" }}>{post.title}</h3>\n      <button>Delete</button> <button>Update title</button>\n      <p>{post.body}</p>\n      <h4>Comments</h4>\n      {data.map((comment) => (\n        <li key={comment.id}>\n          {comment.email}: {comment.body}\n        </li>\n      ))}\n    </>\n  );\n}\n",{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":5,"column":7,"nodeType":"39","messageId":"40","endLine":5,"endColumn":18},{"ruleId":"37","severity":1,"message":"41","line":15,"column":23,"nodeType":"39","messageId":"40","endLine":15,"endColumn":37},{"ruleId":"37","severity":1,"message":"42","line":57,"column":10,"nodeType":"39","messageId":"40","endLine":57,"endColumn":30},{"ruleId":"37","severity":1,"message":"43","line":1,"column":16,"nodeType":"39","messageId":"40","endLine":1,"endColumn":29},{"ruleId":"37","severity":1,"message":"44","line":8,"column":16,"nodeType":"39","messageId":"40","endLine":8,"endColumn":26},{"ruleId":"37","severity":1,"message":"45","line":16,"column":16,"nodeType":"39","messageId":"40","endLine":16,"endColumn":26},"no-native-reassign",["46"],"no-negated-in-lhs",["47"],"no-unused-vars","'maxPostPage' is assigned a value but never used.","Identifier","unusedVar","'setCurrentPage' is assigned a value but never used.","'computeClossetToZero' is defined but never used.","'fetchComments' is defined but never used.","'deletePost' is defined but never used.","'updatePost' is defined but never used.","no-global-assign","no-unsafe-negation"]